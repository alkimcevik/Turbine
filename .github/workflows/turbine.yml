name: 'Turbine CI'

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PY_COLORS: "1"
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        python-version: ["3.10"]

    steps:
    # Step 1: Checkout repository
    - uses: actions/checkout@v4

    # Step 2: Set up Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade wheel
        pip install -r requirements.txt

    # Step 4: Install SeleniumBase
    - name: Install SeleniumBase
      run: |
        python setup.py install
        pip install -U seleniumbase

    # Step 5: Install Allure Pytest Plugin
    - name: Install Allure Pytest Plugin
      run: pip install allure-pytest

    # Step 6: Install chromedriver
    - name: Install chromedriver
      run: seleniumbase install chromedriver

    # Step 7: Install and run Flake8 Linter
    - name: Install Flake8
      run: pip install flake8
    - name: Run Flake8 Linter
      continue-on-error: true
      run: flake8 examples/nypl_tests --max-line-length=120 --statistics --count || true

    # Step 8: Ensure pytest is working
    - name: Make sure pytest is working
      run: |
        echo "def test_1(): pass" > nothing.py
        pytest nothing.py

    # Step 9: Run all tests and generate Allure results
    - name: Run all tests
      continue-on-error: true
      run: |
        pytest examples/nypl_tests --headless --browser=chrome --rs -v -s -n=6 --reruns=2 --reruns-delay=1 --ignore=examples/nypl_tests/test_mobile.py --alluredir=reports/allure-results

    # Step 10: Run mobile-specific tests
    - name: Run test_mobile.py
      continue-on-error: true
      run: |
        pytest examples/nypl_tests/test_mobile.py --rs -v -s -n=6 --reruns=2 --reruns-delay=1 --mobile --alluredir=reports/allure-results

    # Step 11: Get Allure history
    - name: Get Allure history
      uses: actions/checkout@v2
      continue-on-error: true
      with:
        ref: gh-pages
        path: gh-pages

    # Step 12: Generate Allure report
    - name: Generate Allure report
      uses: simple-elf/allure-report-action@master
      with:
        allure_results: reports/allure-results
        allure_history: allure-history

    # Step 13: Deploy report to GitHub Pages
    - name: Deploy report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v2
      env:
        PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        publish_branch: gh-pages
        publish_dir: allure-history
